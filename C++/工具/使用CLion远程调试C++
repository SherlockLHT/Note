# 说明

C++ 和 Java 等高级语言不同，即使用了 MinGW，也不能保证一处编写的代码，多平台运行，所以有时候，我们需要针对远程的目标平台调试代码，尤其是在没有。

目前 VS 这款宇宙第一的 IDE 已经支持远程调试了，但是使用效果却不尽如人意，本次介绍使用 CLion 远程调试，虽然也不是那么完美，但毕竟使用比较顺手。

# 环境

代码编写平台：windows10

目标平台：ubuntu 16.04

构建工具：cmake

# 使用方法

## 1、远程环境安装工具链

需要的工具有：ssh、cmake、make 和 gdbserver，安装方式不做介绍

其中，ssh 用作远程登陆，cmake 和 make 用作构建编译，gdbserver 用作调试

## 2、同步远程代码

既然需要远程调试，那么就一定需要同步远程和本地的代码

首先，使用CLion在本地编写代码，或者代码已经存在cmake项目。

依次点击 File -> Settings -> Build,Execution,Deployment -> Deployment，在右侧配置远程主机，如下图，我这里命名为ubuntu64：

![image-20200510200417067](image-20200510200417067.png)

配置完成之后，在侧边栏的Remote Host 中可以看到主机

点击 Mappings，配置远程源码路径

![image-20200510200607647](image-20200510200607647.png)

配置完成之后，在项目上右键 Deployment -> Upload to 来上传代码，首次点击时，需要选择上传到那个远程主机，选择之前添加的即可

也可以勾选自动上传，如下图，每当有项目有文件改变时，会自动上传代码，避免每次需要自己点击上传

![image-20200510201836132](image-20200510201836132.png)

## 3、远程开启调试监听

使用 gdbserver 工具实现远程调试的功能

首先需要在远程开启 gdbserver 服务。远程登陆主机，切换到上传的项目根目录下，执行以下指令编译程序

```
cmake . -DCMAKE_BUILD_TYPE=Debug
make
```

这里构建时，cmake 使用了 **-DCMAKE_BUILD_TYPE=Debug** 来实现调试功能

编译完成之后，使用 gdbserver 来监听

```
gdbserver :8089 ./bin/uvTest
```

:8089 表示监听8089端口

./bin/uvTest 为可执行文件

执行执行后，gdbserver 监听8089端口，发现有连接后，执行进程，开始调试，并反馈调试信息

## 4、开启远程调试

远程主机开启调试监听后，本地只需要配置，实现远程调试即可

打开 Edit/Debug configurations，新增运行配置，如下图：

![image-20200510204917307](image-20200510204917307.png)

GDB 选择 Bundled GDB，target remote args填入以下

```
tcp:192.168.2.118:8089
```

表示用tcp的方式传输远程信息，8089为远程主机监听的端口

在Path mappings 中配置映射路径，分别是远程主机上的项目根目录和本地源码的根目录

## 5、开始调试

在代码中设置断点，开始调试即可

一次调试完成，需要重新开启远程的 gdbserver 重新调试