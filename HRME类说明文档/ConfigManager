

### 说明

配置管理类，内部包含了针对ini文件的读写接口，用作程序运行时的参数获取和设置，包括程序的配置，算法的参数，因为此类需要操作IO口，频繁的操作会导致程序运行效率降低，所以，只在程序开启和手动参数设置的时候调用。

### 接口

```c++
	/*
	 * @brief		获取开机启动画面文字大小
	 * @param[in]	default_weight	缺省文字大小
	 */
	int GetSplashScreenTextWeight(int default_weight);

	/*
	 * @brief		获取开机启动画面文字颜色
	 * @param[in]	default_color	默认文字颜色，16进制
	 */
	QString GetSplashScreenTextColor(const QString& default_color);

	/*
	 * @brief		设置/保存视频保存路径
	 * @param[in]	video_save_path		需要设置的图像保存路径
	 * @param[in]	default_save_path	缺省的保存路径
	 */
	void SetVideoImageSavePath(const QString& video_save_path);
	QString GetVideoSavePath(const QString& default_save_path);

	/*
	 * @brief		设置/获取图像保存路径
	 * @param[in]	image_save_path		需要设置的图像保存路径
	 * @param[in]	default_save_path	缺省的保存路径
	 */
	void SetImageSavePath(const QString& image_save_path);
	QString GetImageSavePath(const QString& default_save_path);

	/*
	 * @brief		设置/获取视频格式
	 * @param[in]	video_type		需要设置的视频种类
	 * @param[in]	default_type	缺省视频种类
	 */
	void SetSaveVideoType(const QString& video_type);
	QString GetSaveVideoType(const QString& default_type);

	/*
	 * @brief		设置/获取图片种类
	 * @param[in]	image_type		需要设置的图片种类
	 * @param[in]	default_type	缺省图像种类
	 */
	void SetSaveImageType(const QString& image_type);
	QString GetSaveImageType(const QString& default_type);

	/*
	 * @brief		设置/获取图像的帧帧率
	 * @param[in]	frame_rate			需要设置保存的帧率
	 * @param[in]	default_frame_rate	缺省的帧率
	 */
	void SetSaveVideoFrameRate(float frame_rate);
	float GetSaveVideoFrameRate(float default_frame_rate);

	/*
	 * @brief		设置/获取PNG图片格式的压缩等级0~9
	 * @param[in]	compression_level			需要设置的压缩等级
	 * @param[in]	default_compression_level	缺省的压缩等级
	 */
	void SetPNGImageCompressionLevel(unsigned int compression_level);
	unsigned int GetPNGImageCompressionLevel(unsigned int default_compression_level);

	/*
	 * @brief		设置/获取PGM图像格式是否保存为二进制文件
	 * @param[in]	is_binary_file			需要设置的配置
	 * @param[in]	is_default_binary_file	缺省的配置
	 */
	void SetPGMImageBinaryFileEnabled(bool is_binary_file);
	bool GetPGMImageBinaryFileEnabled(bool is_default_binary_file);

	/*
	 * @brief		设置/获取JPEG图片格式的图像质量(0~100)
	 * @param[in]	quality			需要保存的配置
	 * @param[in]	default_quality	缺省的配置
	 */
	void SetJPEGImageQuality(unsigned int quality);
	unsigned int GetJPEGImageQuality(unsigned int default_quality);

	/*
	 * @brief	设置/获取保存图片的数量
	 */
	void SetSavePictureNumber(unsigned int number);
	unsigned GetSavePictureNumber(unsigned int default_number);

	/*
	 * @brief		设置/获取前对比度数值
	 * @param[in]	value			需要设置的数值
	 * @param[in]	default_value	缺省的数值
	 */
	void SetAlpheBeforeValue(int value);
	int GetAlpheBeforeValue(int default_value);

	/*
	 * @brief		设置/获取后对比度数值
	 * @param[in]	value			需要设置的数值
	 * @param[in]	default_value	缺省的数值
	 */
	void SetAlpheAfterValue(int value);
	int GetAlpheAfterValue(int default_value);

	/*
	 * @brief		设置/获取自适应窗口大小值
	 * @param[in]	value			需要设置的数值
	 * @param[in]	default_value	缺省的数值
	 */
	void SetBlockSizeValue(int value);
	int GetBlockSizeValue(int default_value);

	/*
	 * @brief	设置/获取高斯窗口大小
	 */
	void SetGuassSize(int value);
	int GetGuassSize(int default_value);

	/*
	 * @brief	设置/获取中值大小
	 */
	void SetMedianSize(int value);
	int GetMedianSize(int default_value);

	/*
	 * @brief	设置/获取半径
	 */
	void SetRadius(int value);
	int GetRadius(int default_radius);

	/*
	 * @brief	设置/获取处理前对比度增强系数
	 */
	void SetContrastIntensityBefore(int value);
	int GetContrastIntensityBefore(int default_value);

	/*
	 * @brief	设置/获取处理器前分块区域大小
	 */
	void SetBlockAreaBefore(int value);
	int GetBlockAreaBefore(int default_value);

	/*
	 * @brief	设置/获取补偿系数
	 */
	void SetCompensationCoefficient(float value);
	float GetCompensationCoefficient(float default_value);

	/*
	 * @brief	设置/获取处理后对比度增强系数
	 */
	void SetContrastIntensityAfter(int value);
	int GetContrastIntensityAfter(int default_value);

	/*
	 * @brief	设置/获取处理后分块区域
	 */
	void SetBlockAreaAfter(int value);
	int GetBlockAreaAfter(int default_value);

	/*
	 * @brief	设置/获取对比度算法的每块线程行数
	 */
	void SetContrastThreadRowsPerBlock(unsigned int rows);
	unsigned int GetContrastThreadRowsPerBlock(unsigned int default_rows);

	/*
	 * @brief	设置/获取对比度算法的每块线程列数
	 */
	void SetContrastThreadColumnsPerBlock(unsigned int columns);
	unsigned int GetContrastThreadColumnsPerBlock(unsigned int default_columns);

	/*
	 * @brief		设置/获取是否计算灰度值
	 * @param[in]	is_enable		需要保存的设置
	 * @param[in]	default_enabled	缺省的设置
	 */
	void SetGreyValueEnabled(bool is_enable);
	bool GetGreyValueEnabled(bool default_enabled);

	/*
	 * @brief		设置/获取是否使用对比度增强算法
	 * @param[in]	is_enable		需要保存的设置
	 * @param[in]	default_enabled	缺省的设置
	 */
	void SetContrastEnhancementAlgorithmEnabled(bool is_used);
	bool GetContrastEnhancementAlgorithmEnabled(bool default_used);

	/*
	 * @brief		设置/获取是否使用对比度增强算法的CUDA加速
	 * @param[in]	is_enable		需要保存的设置
	 * @param[in]	default_enabled	缺省的设置
	 */
	void SetContrastEnhancementAlgorithmCUDAEnabled(bool is_used);
	bool GetContrastEnhancementAlgorithmCUDAEnabled(bool default_used);

	/*
	 * @brief	设置/获取灰度算法是否使用矩形采样
	 */
	void SetGreyValueRectangleSamplingEnabled(bool is_enable);
	bool GetGreyValueRectangleSamplingEnabled(bool default_enabled);

	/*
	 * @brief	设置/获取灰度算法使用矩形采样的尺寸
	 */
	void SetGreyValueRectangleSamplingSize(const QSize& size);
	QSize GetGreyValueRectangleSamplingSize(const QSize& default_size);

	/*
	 * @brief	设置/获取灰度算法使用圆形采样的半径
	 */
	void SetGreyValueCircularSamplingRadius(unsigned int radius);
	unsigned int GetGreyValueCircularSamplingRadius(unsigned int radius);

	/*
	 * @brief	设置/获取灰度值的每块线程行数
	 */
	void SetGreyThreadRowsPerBlock(unsigned int rows);
	unsigned int GetGreyThreadRowsPerBlock(unsigned int default_rows);

	/*
	 * @brief	设置/获取灰度值的每块线程列数
	 */
	void SetGreyThreadColumnsPerBlock(unsigned int columns);
	unsigned int GetGreyThreadColumnsPerBlock(unsigned int default_columns);

	/*
	 * @brief	设置/获取梯度分割算法是否使用
	 */
	void SetGradientSegmentEnabled(bool is_used);
	bool GetGradientSegmentEnabled(bool default_used);

	/*
	 * @brief	设置/获取梯度分割算法是否启用CUDA加速
	 */
	void SetGradientSegmentCUDAEnabled(bool is_used);
	bool GetGradientSegmentCUDAEnabled(bool default_used);

	/*
	 * @brief	设置/获取低/高梯度判断阈值
	 */
	void SetLowHeightThreshold(float value);
	float GetLowHeightThreshold(float default_value);

	/*
	 * @brief	获取/设置低/高梯分割算法参数
	 * @note	设置为单独设置
	 */
	void GetLowGradientSegmentationParam(IMAGE_ALGORITHM::GradientSegmentationParam* param,
		const IMAGE_ALGORITHM::GradientSegmentationParam& default_param);
	void GetHighGradientSegmentationParam(IMAGE_ALGORITHM::GradientSegmentationParam* param,
		const IMAGE_ALGORITHM::GradientSegmentationParam& default_param);
	void SetLowGradientOutsideNoiseFilter(int value);
	void SetHighGradientOutsideNoiseFilter(int value);
	void SetLowGradientNucleusMaxBright(int value);
	void SetHighGradientNucleusMaxBright(int value);
	void SetLowGradientBrightRiseLevel(float value);
	void SetHighGradientBrightRiseLevel(float value);
	void SetLowGradientContrastRiseLevel(int value);
	void SetHighGradientContrastRiseLevel(int value);
	void SetLowGradientOriginBackgroundBrightCompensation(float value);
	void SetHighGradientOriginBackgroundBrightCompensation(float value);
	void SetLowGradientOriginBackgroundProportion(float value);
	void SetHighGradientOriginBackgroundProportion(float value);
	void SetLowGradientBackgroundBright(float value);
	void SetHighGradientBackgroundBright(float value);
	void SetLowGradientNucleusBright(float value);
	void SetHighGradientNucleusBright(float value);
	void SetLowCLAHEValue(int value);
	void SetHighCLAHEValue(int value);
	void SetLowCLAHEBlockSize(int value);
	void SetHighCLAHEBlockSize(int value);
	void SetLowFilterWindow(int value);
	void SetHighFilterWindow(int value);
	void SetLowRadius(int value);
	void SetHighRadius(int value);
	void SetLowGradientAlpha(float value);
	void SetHighGradientAlpha(float value);

	/*
	 * @brief	参数类型，包括几个范围
	 */
	enum ParamType
	{
		From0To35,	//0~35
		From35To65,	//35~65
		From65To255	//65~255
	};

	/*
	 * @brief	根据参数类型获取后缀
	 */
	QString GetParamSuffixByParamType(ParamType param_type);

	/*
	 * @brief		获取大肠隐窝算法参数
	 * @param[in]	default_param	默认参数
	 * @param[in]	param_type		参数范围
	 * @param[out]	param			输出参数
	 */
	void GetGastrointestinalFossaeParam(IMAGE_ALGORITHM::AlgorithmParameter* param, 
		const IMAGE_ALGORITHM::AlgorithmParameter& default_param, ParamType param_type);

	/*
	 * @brief	设置大肠隐窝参数
	 */
	void SetGastrointestinalFossaeGaussFilterSize(int value, ParamType param_type);
	void SetGastrointestinalFossaeClaheIntensity(int value, ParamType param_type);
	void SetGastrointestinalFossaeClaheSize(int value, ParamType param_type);
	void SetGastrointestinalFossaeGammaIntensity(float value, ParamType param_type);
	void SetGastrointestinalFossaeGammaMaxBrightness(int value, ParamType param_type);
	void SetGastrointestinalFossaeResultMaxBrightness(int value, ParamType param_type);

	/*
	 * @brief	获取鳞状细胞算法参数
	 */
	void GetSquamousCellParam(IMAGE_ALGORITHM::AlgorithmParameter* param,
		const IMAGE_ALGORITHM::AlgorithmParameter& default_param, ParamType param_type);

	/*
	 * @brief	设置鳞状细胞算法参数
	 */
	void SetSquamousCellGaussFilterSize(int value, ParamType param_type);
	void SetSquamousCellClaheIntensity(int value, ParamType param_type);
	void SetSquamousCellClaheSize(int value, ParamType param_type);
	void SetSquamousCellGammaIntensity(float value, ParamType param_type);
	void SetSquamousCellGammaMaxBrightness(int value, ParamType param_type);
	void SetSquamousCellResultMaxBrightness(int value, ParamType param_type);

	/*
	 * @brief	设置/获取标尺文字
	 */
	QString GetScaleText(const QString& default_text);
	void SetScaleText(const QString& text);

	/*
	 * @brief		设置/保存是否使用图像缩放
	 * @param[in]	is_enabled		需要保存的设置
	 * @param[in]	default_enabled	缺省设置
	 */
	void SetImageZoomEnabled(bool is_enabled);
	bool GetImageZoomEnabled(bool default_enabled);

	/*
	 * @brief		设置/保存是否显示原始图像
	 * @param[in]	is_enabled		需要保存的设置
	 * @param[in]	default_enabled	缺省设置
	 */
	void SetShowOriginImageEnabled(bool is_enabled);
	bool GetShowOriginImageEnabled(bool default_enabled);

	/*
	 * @brief	设置/保存滚动条是否同步
	 */
	void SetScrollSynchroEnabled(bool is_enabled);
	bool GetScrollSynchroEnabled(bool default_enabled);

	/*
	 * @brief	设置/读取是否显示帧率
	 */
	void SetShowFrameRateEnabled(bool is_enabled);
	bool GetShowFrameRateEnabled(bool default_enabled);

	/*
	 * @brief	设置/获取是否显示灰度值
	 */
	void SetShowGreyValueEnabled(bool is_show);
	bool GetShowGreyValueEnabled(bool default_show);

	/*
	 * @brief	设置/获取显示录像状态提示的使能状态
	 */
	void SetShowRecordStatusTipsEnabled(bool is_show);
	bool GetShowRecordStatusTipsEnabled(bool default_show);

	/*
	 * @brief	设置/获取显示标尺使能状态
	 */
	void SetShowScaleEnabled(bool is_show);
	bool GetShowScaleEnabled(bool default_show);

	/*
	 * @brief	设置/保存波特率
	 */
	void SetBaudRate(int baud_rate);
	int GetBaudRate(int default_baud_rate);

	/*
	 * @brief	设置/获取数据位
	 */
	void SetDataBits(int data_bits);
	int GetDataBits(int default_data_bits);

	/*
	 * @brief	设置/获取数据流
	 */
	void SetFlowControl(int flow_control);
	int GetFlowControl(int default_flow_control);

	/*
	 * @brief	设置/获取奇偶校验位
	 */
	void SetParity(int parity);
	int GetParity(int default_parity);

	/*
	 * @brief	设置/获取停止位
	 */
	void SetStopBits(int stop_bits);
	int GetStopBits(int default_stop_bits);

	/*
	 * @brief	设置/获取相机检测时间间隔
	 */
	void SetCameraDetectTimeinterval(unsigned int time_interval);
	unsigned int GetCameraDetectTimeinterval(unsigned int default_time_interval);

	/*
	 * @brief	当前打开的串口名称
	 */
	void SetCurrentOpenedSerialName(const QString& serial_name);
	QString GetCurrentOpenedSerialName(const QString& default_serial_name);

	/*
	 * @brief	获取最近一次打开的串口名称
	 */
	QString GetLastTimeOpenedSerialName();

	/*
	 * @brief	设置/获取语言
	 */
	void SetLanguage(const QString& language);
	QString GetLanguage(const QString& default_language);

	/*
	 * @brief	设置/获取是否自动录像
	 */
	void SetAutoVideotapeEnabled(bool is_auto);
	bool GetAutoVideotapeEnabled(bool default_auto);

	/*
	 * @brief	设置/获取图像驻留快捷键
	 */
	void SetImagePauseKeySequence(const QKeySequence& key_sequence);
	void GetImagePauseKeySequence(const QKeySequence& default_key_sequence,
										QKeySequence* out_key_sequence);

	/*
	 * @brief	设置/获取保存图像快捷键
	 */
	void SetSaveImageKeySequence(const QKeySequence& key_sequence);
	void GetSavePauseKeySequence(const QKeySequence& default_key_sequence,
								QKeySequence* out_key_sequence);

	/*
	 * @brief	设置/获取计算帧率的算法
	 */
	void SetCalculateFrameRateAlgorithm(unsigned int type);
	unsigned int GetCalculateFrameRateAlgorithm(unsigned int default_type);

	/*
	 * @brief	设置/获取亮度固定使能状态
	 */
	void SetBrightnessFixedEnabled(bool is_enabled);
	bool GetBrightnessFixEnabled(bool default_enabled);

	/*
	 * @brief	设置/获取相机亮度值
	 * @param[in]	value	数值
	 * @param[in]	is_on	是否开启
	 */
	void SetBrightnessSetting(float value, bool is_on);
	void GetBrightnessSetting(float* value, bool* is_on);

	/*
	 * @brief	设置/获取相机曝光固定使能状态
	 */
	void SetExposureFixedEnabled(bool is_enabled);
	bool GetExposureFixedEnabled(bool default_enabled);

	/*
	 * @brief	设置/获取相机曝光值
	 * @param[in]	value	数值
	 * @param[in]	is_on	是否开启
	 */
	void SetExposureSetting(float value, bool is_on);
	void GetExposureSetting(float* value, bool* is_on);

	/*
	 * @brief	设置/获取相机锐度固定使能状态
	 */
	void SetSharpnessFixedEnabled(bool is_enabled);
	bool GetSharpnessFixedEnabled(bool default_enabled);

	/*
	 * @brief	设置/获取相机的锐度值
	 * @param[in]	value	数值
	 * @param[in]	is_on	是否开启
	 */
	void SetSharpnessSetting(float value, bool is_on);
	void GetSharpnessSetting(float* value, bool* is_on);

	/*
	 * @brief	设置/获取gamma固定使能状态
	 */
	void SetGammaFixedEnabled(bool is_enabled);
	bool GetGammaFixedEnabled(bool default_enabled);

	/*
	 * @brief	设置/获取相机gamma值
	 * @param[in]	value	数值
	 * @param[in]	is_on	是否开启
	 */
	void SetGammaSetting(float value, bool is_on);
	void GetGammaSetting(float* value, bool* is_on);

	/*
	 * @brief	设置/获取相机快门固定使能状态
	 */
	void SetShutterFixedEnabled(bool is_enabled);
	bool GetShutterFixedEnabled(bool default_enabled);

	/*
	 * @brief	设置/获取相机快门值
	 * @param[in]	value	数值
	 * @param[in]	is_on	是否开启
	 */
	void SetShutterSetting(float value, bool is_on);
	void GetShutterSetting(float* value, bool* is_on);

	/*
	 * @brief	设置/获取相机增益固定使能状态
	 */
	void SetGainFixedEnabled(bool is_enabled);
	bool GetGainFixedEnabled(bool default_enabled);

	/*
	 * @brief	设置/获取相机增益值
	 * @param[in]	value	数值
	 * @param[in]	is_on	是否开启
	 */
	void SetGainSetting(float value, bool is_on);
	void GetGainSetting(float* value, bool* is_on);
```

